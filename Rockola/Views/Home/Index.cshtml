@{
    ViewBag.Title = "Youtube Player";
}



    <div class="container">
        <h2> Youtube Video Search</h2>
        <input type="text" class="" id="txtSearch" placeholder="Search" />
        <button class="" href="javascript:void(0)" onclick="btnSearch()"><i class="glyphicon glyphicon-search"></i></button>
    </div>

        <div class="container">
            <div class="row">
                <div class="col" id="ListYoutube">
                </div>

            </div>
            <div class="col" id="playVideo"> </div>
        </div>


<h2>Playlist</h2>
<div class="control-group row col-lg-13 mt-3 table-bordered bg-dark" id="playList" style="height:200px;">

</div>
<script>

    

    function btnSearch()
    {

        $.ajax(
            {
                url: '@Url.Action("SearchList")?keyword=' + $('#txtSearch').val(),
                type: 'GET',
                success: function (result)
                {
                    $('#ListYoutube').html(result);

                }

            });
    }

    // 2. This code loads the IFrame Player API code asynchronously.
    var tag = document.createElement('script');

    tag.src = "https://www.youtube.com/iframe_api";
    var firstScriptTag = document.getElementsByTagName('script')[0];
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

    // 3. This function creates an <iframe> (and YouTube player)
    //    after the API code downloads.
    var player;

    var band = false;

    var playListContainer;

    var videoStopped = false;

    function onYouTubeIframeAPIReady(videoId) {

        if (videoId == null) {
            videoId = '1zKo_I8VhkA';
        }

        player = new YT.Player('playVideo', {
            height: '360',
            width: '640',
            videoId: videoId,
            events: {
                'onReady': onPlayerReady,
                'onStateChange': onPlayerStateChange
            }
        });
    }

    // 4. The API will call this function when the video player is ready.
    function onPlayerReady(event) {
        event.target.playVideo();
    }

    // 5. The API calls this function when the player's state changes.
    //    The function indicates that when playing a video (state=1),
    //    the player should play for six seconds and then stop.
    var done = false;
    function onPlayerStateChange(event) {
        if (event.data == YT.PlayerState.PLAYING && !done) {
            setTimeout(stopVideo, 6000);
            done = true;
        }
    }
    function stopVideo() {
        player.stopVideo();
    }


    var playListContainer;


    function onPlayerStateChange(event) {

        if (event.data == YT.PlayerState.PLAYING) {

            band = true;

        } else if (event.data == YT.PlayerState.PAUSED) {

            band = false;

        }

        //console.log(event.data);

        //console.log(event.data == YT.PlayerState.PLAYING);

        //console.log(YT.PlayerState.PLAYING);



        if (event.data == YT.PlayerState.ENDED && !done) {

            //reproducir 1er video de la cola

            playListContainer = document.getElementById('playList');

            var nextVideoToPlay = playListContainer.children[0];

            console.log(nextVideoToPlay);

            videoStopped = true;

            playQueue();



        }

        //if (event.data == YT.PlayerState.PLAYING && !done) {

        //    console.log(event.data);

        //    //console.log(event.data == YT.PlayerState.PLAYING);

        //    //console.log('ee');

        //    setTimeout(stopVideo, 6000);

        //    done = true;

        //}

        //

        //} else {

        //    if (event.data == )

        //}

    }
    function stopVideo() {

        player.stopVideo();

    }

    function addToPlayList(videoId, videoImageURL) {

        if (band) {
            //    //Agregar a playlist
            playListContainer = document.getElementById('playList');
            var img = document.createElement('img');
            img.src = videoImageURL;
            img.alt = videoId;
            img.classList = "table-bordered border-danger rounded mx-2 mt-2 mb-2";
            img.width = 190;
            playListContainer.append(img);



            //var img = document.getElementById('img');
            //img.src = videoImageURL;
            //img.alt = videoId;
            //img.classList = "table-bordered border-danger rounded mx-2 mt-2 mb-2";
            //img.width = 190;
            //playListContainer.append(img);

        }
        else {

            player.destroy();

            onYouTubeIframeAPIReady(videoId);

        }
    }

    function playQueue() {

        var firstVideo = playListContainer.children[0];

        var videoId = firstVideo.alt;

        firstVideo.remove();

        player.destroy();

        onYouTubeIframeAPIReady(videoId);

    }
   



    @*function btnPlay(videoId)
    {
        @*$.ajax(
            {
                url: '@Url.Action("PlayVideo","Home")?VideoId=' + videoId,
                type: 'GET',
                success: function (result) {
                    $('#playVideo').html(result);
                    console.log("entro");
                }
            });*@
    

   
</script>
