@{
    ViewBag.Title = "Youtube Player";
}
<link href="~/StyleSheet.css" rel="stylesheet" type="text/css" />


<div class="container my-container ">
    <h2> Youtube Video Search</h2>
    <input type="text" class="form" id="txtSearch" placeholder="Search" />
    <button class="" href="javascript:void(0)" onclick="btnSearch()"><i class="glyphicon glyphicon-search"></i></button>
</div>

<div class="container">
    <div class="row my-row">
        <div class="col my-col1" id="SearchList">
        </div>
        <div class="col my-col2" id="playVideo">

        </div>
    </div>
</div>


<h4>Playlist</h4>
<div class="control-group row col-lg-12 ml-3  " id="playList" style="height:150px;">

</div>
<script>
    function btnSearch()
    {

        $.ajax(
            {
                url: '@Url.Action("BuscarLista")?palabra=' + $('#txtSearch').val(),
                type: 'GET',
                success: function (result)
                {
                    $('#SearchList').html(result);
                }
            });
    }

    // 2. This code loads the IFrame Player API code asynchronously.
    var tag = document.createElement('script');
    tag.src = "https://www.youtube.com/iframe_api";

    var firstScriptTag = document.getElementsByTagName('script')[0];
  
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
    // 3. This function creates an <iframe> (and YouTube player)
    //    after the API code downloads.
    var player;
    var flag = false;
    var playListContainer;


    function onYouTubeIframeAPIReady(VideoId)
    {

        if (VideoId == null)
        {
            VideoId = 'DXUAyRRkI6k';
        }

        player = new YT.Player('playVideo', {
            height: '300',
            width: '650',
            videoId: VideoId,
            events: {
                'onReady': onPlayerReady,
                'onStateChange': onPlayerStateChange
            }
        });
    }

    // 4. The API will call this function when the video player is ready.
    function onPlayerReady(event) {
        event.target.playVideo();
    }

    // 5. The API calls this function when the player's state changes.
    //    The function indicates that when playing a video (state=1),
    //    the player should play for six seconds and then stop.
    var done = false;
    function onPlayerStateChange(event) {
        if (event.data == YT.PlayerState.PLAYING) {
            flag = true;

        } else if (event.data == YT.PlayerState.PAUSED)
        {
            flag = false;
        }

        if (event.data == YT.PlayerState.ENDED && !done)
        {
            playListContainer = document.getElementById('playList');
           
            videoStopped = true;
            playQueue();
        }

    }
   

    
    function stopVideo() {

        player.stopVideo();

    }

    function addToPlayList(VideoId, videoImageURL, Title) {

       
        if (flag) {
       
            playListContainer = document.getElementById('playList');
            var img = document.createElement('img');
            img.src = videoImageURL;
            img.alt = VideoId;
            img.Title = Title
            img.classList = "table-bordered border-danger rounded mx-4";
            img.width = 160;
            playListContainer.append(img);

        }
        else {

            player.destroy();

            onYouTubeIframeAPIReady(VideoId);

        }
    }

    function playQueue() {

        var firstVideo = playListContainer.children[0];

        var videoId = firstVideo.alt;
        var Title = firstVideo.Title;
       
        firstVideo.remove();

        player.destroy();
        
        onYouTubeIframeAPIReady(videoId);

        var video = {
            "videoName": Title,
            "videoId": videoId
        }

        console.log(video);
       

        $.ajax({
            type: "POST",
            dataType: "json",
            url: "http://localhost:58905/api/Youtube",
            data: video,
            success: function (result) {
                console.info(result);
            }

        });

    }
</script>
